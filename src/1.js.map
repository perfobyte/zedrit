{
  "version": 3,
  "sources": ["f/html/put_inside.js", "f/html/put_deep_inside.js", "f/html/compile.js", "f/html/compress.js"],
  "sourcesContent": ["\n\nexport default (\n    (node,data,locals) => {\n        var\n            index = 0,\n            index_2 = 0\n        ;\n        \n        while (true) {\n            if (\n                ((\n                    index = data.indexOf(\"${\")\n                ) !== -1)\n                &&\n                ((index_2 = data.indexOf(\"}\")) > index)\n            ) {\n                \n                data = (\n                    data.substring(0,index)\n                    + locals[\n                        data\n                        .substring(index+2,index_2)\n                        .trim()\n                    ]\n                    + data.substring(index_2+1)\n                );\n            }\n            else {\n                node.data = data;\n                data = \"\";\n                break;\n            }\n        }\n    }\n);\n", "import put_inside from './put_inside.js';\n\n\nexport default (\n    (childs,i,locals, put_deep_inside) => {\n                \n        var\n            l = childs.length,\n            child = null,\n            type = \"\"\n        ;\n        \n        \n        for(;i<l;i++){\n            child = childs[i];\n            if ((type = child.type) === 1) {\n                put_deep_inside(child.children,0,locals)\n            }\n            else if (type === 2) {\n                put_inside(child, child.data, locals)\n            }\n        }\n\n    }\n);\n", "import put_inside from './put_inside.js';\nimport put_deep_inside from './put_deep_inside.js';\n\n\nexport default (\n    (element, cwd, locals, api, compile) => {\n        var\n            i = 0,\n            length = 0,\n            nodes = element.children,\n            l = nodes.length,\n            children = null,\n            node = null,\n            parent = null,\n            j = 0,\n            jl = 0,\n            childs = null,\n            index = 0,\n            index_2 = 0,\n            data = \"\",\n            type = 0,\n\n            name = \"\",\n            html = \"\",\n            path = \"\",\n            dc = null,\n            child = null,\n            Nodes = api.Nodes,\n\n            bool = false\n        ;\n        for (;i<l;i++) {\n            node = nodes[i];\n            type = node.type;\n            \n            if (type === 1) {\n\n                name = node.name;\n                if (name === \"put\") {\n                    \n                    if (node.get_attribute(\"to\") === \"parentElement\") {\n                        parent = node.parent;\n                        node.remove();\n                        l--;\n                        i--;\n\n                        j = 0;\n                        jl = (childs = parent.children).length;\n\n                        for(;j<jl;j++){\n                            child = childs[j];\n                            if (child.type === 2) {\n                                put_inside(child,child.data,locals);\n                            }\n                        }\n                    }\n                    else {\n                        \n                        \n                        jl = (childs = node.children).length;\n\n                        if (jl) {\n                            \n                            j = 0;\n                            for (;j<jl;j++) {\n                                child = childs[j];\n                                \n                                if ((type = child.type) === 1) {\n                                    put_deep_inside(child.children,0,locals,put_deep_inside);\n                                }\n                            };\n\n                            node.replace_with_many((children=node.children).slice());\n                            l += (length = children.length - 1);\n                            i += (length);\n                        }\n                        else {\n                            node.remove();\n                            i--;\n                            l--;\n                        }\n                    }\n\n                }\n                else if (\n                    name === \"if\"\n                ) {\n                    j = 0;\n                    jl = (childs = node.children).length;\n                    bool = true;\n\n                    for(;j<jl;j++) {\n                        child = childs[j];\n                        if (child.type === 2) {\n                            bool &&= locals[child.name](locals);\n                        }\n                    };\n\n                    if (bool && (length = (children = node.children).length)) {\n                        node.replace_with_many(children.slice());\n                        l += (--length);\n                        i += (length);\n                    }\n                    else {\n                        node.remove();\n                        i--;\n                        l--;\n                    }\n                }\n                else if (\n                    name === \"paste\"\n                ) {\n                    path = api.join(cwd, node.get_attribute(\"from\"));\n                    console.log(path);\n\n                    html = api.read(path).toString();\n                    \n                    dc = element.create_document(new Nodes());\n\n                    node.parse(\n                        html, dc,\n                        0, html.length,\n                        api.unclosed, api.space, api.quotes,\n                        api.Node, Nodes,\n                    );\n\n                    compile(\n                        dc,\n                        api.dirname(path),\n                        locals,\n                        api,\n                        compile,\n                    );\n\n                    (length = (children=dc.children).length)\n                    ? (\n                        node.replace_with_many(children.slice()),\n                        \n                        (l += (--length)),\n                        (i += (length))\n                    )\n                    : (\n                        node.remove(),\n                        (l--),\n                        (i--)\n                    )\n                }\n                else {\n                    compile(\n                        node,\n                        cwd,\n                        locals,\n                        api,\n                        compile,\n                    );\n                }\n\n            }\n        }\n        return undefined;\n    }\n)", "export default (\n    (el, compress) => {\n        var\n            childs = el.children,\n            i = 0,\n            l = childs.length,\n            child = null,\n            type = \"\"\n        ;\n        while (i<l) {\n            child=childs[i];\n            if ((type = child.type) === 1) {\n                compress(child,compress);\n                i++;\n            }\n            else if (type === 3) {\n                (child.data = child.data.trim())\n                ? (i++)\n                : (child.remove(), (l--));\n            }\n            else if (type === 8) {\n                (child.remove(), (l--));\n            }\n            else {\n                i++;\n            }\n        }\n    }\n);\n"],
  "mappings": "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",
  "names": ["put_inside_default", "node", "data", "locals", "index", "index_2", "put_deep_inside_default", "childs", "i", "locals", "put_deep_inside", "l", "child", "type", "put_inside_default", "compile_default", "element", "cwd", "locals", "api", "compile", "i", "length", "nodes", "l", "children", "node", "parent", "j", "jl", "childs", "index", "index_2", "data", "type", "name", "html", "path", "dc", "child", "Nodes", "bool", "put_inside_default", "put_deep_inside_default", "compress_default", "el", "compress", "childs", "i", "l", "child", "type"]
}
